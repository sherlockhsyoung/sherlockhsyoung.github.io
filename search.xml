<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[二叉树学习笔记（三）之平衡二叉树]]></title>
    <url>%2F2018%2F12%2F09%2F%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二叉树学习笔记（二）之堆]]></title>
    <url>%2F2018%2F12%2F08%2F%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%A0%86%2F</url>
    <content type="text"><![CDATA[前言 继续上一篇笔记，本文接着讲 堆 。 堆堆是一类完全二叉树，常用于实现排序，选择最小（大）值和优先队列等 优先队列：一种特殊的队列，队列中元素出栈的顺序是按照元素的优先权大小，而不是元素入队的先后顺序。 堆的定义堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质： 堆中所有非叶子结点总是不大于或不小于其左右孩子结点 堆总是一棵完全二叉树 即按完全二叉树的结点编号排列，n个结点的关键字序列称为堆。 堆可分为： 小顶堆：若堆中所有非叶子结点均不大于其左右孩子结点，则称为小顶堆，显然，根节点必为 n 个结点的最小值 大顶堆：若堆中所有非叶子结点均不小于其左右孩子结点，则称为大顶堆，显然，根节点必为 n 个结点的最大值 相关概念： 子堆：堆中的子树称为子堆 堆顶：堆中根节点的位置称为堆顶 堆尾：堆中最后结点的位置称为堆尾 堆长度：堆中结点的个数称为堆长度 堆的存储结构类型与完全二叉树有所不同，定义如下： 12345678910typdefstruct &#123; RcdType *rcd; //堆基址，0号单元闲置 int n; //堆长度 int size; //堆容量 int tag; //小顶堆与大顶堆的标志：tag = 0为小顶堆，tag = 1为大顶堆 int (* prior)(KeyType,KeyType); //函数变量，用于关键字优先级比较&#125; Heap; //堆类型/* 假设关键字类型为整型，大顶堆和小顶堆的优先函数可分别定义如下： */int greatPrior(int x,int y) &#123; return x&gt;=y; &#125;int lessPrior(int x,int y) &#123; return x&lt;=y; &#125; 堆的实现堆的筛选堆的筛选：将堆中指定的以 pos 结点为根的子树调整为子树，其前提是 pos 结点的左右子树均为子堆。 筛选操作的过程： 将 pos 结点与左右孩子较优先者比较，若 pos 结点较优先则结束 否则 pos 结点与左右孩子中较优先者交换位置，pos 位标下移 重复上述步骤，直至 pos 指示叶子节点 算法如下： 123456789101112131415161718192021222324252627Status swapHeapElem(Heap &amp;H, int i, int j)&#123; //交换堆H中的第i结点和第j结点 RcdType temp; if(i&lt;=0 || i&gt;H.n || j&lt;=0 || j&gt;H.n) &#123; return ERROR; &#125; temp = H.rcd[i]; H.rcd[i] = H.rcd[j]; H.rcd[j] = temp; return OK;&#125;void ShiftDown(Heap &amp;H, int pos) &#123; //对堆H中位置为 pos 的结点做筛选，将以 pos 为根的子树调整为子堆 int lc,rc; while(pos&lt;=H.n/2) &#123; //若pos结点为叶子结点，循环结束 lc = pos*2; //lc为pos结点的左孩子位置 rc = pos*2+1； //rc为pos结点的右孩子位置 if(rc&lt;=H.n&amp;&amp;H.prior(H.rcd[rc].key,H.rcd[lc].key))&#123; lc = rc; //lc为pos结点的左右孩子中较优先者的位置 &#125; if(H.prior(H.rcd[pos].key,H.rcd[lc].key))&#123; return; //若pos结点较优先，则筛选结束 &#125; swapHeapElem(H, pos, lc); //否则pos和较优先者lc交换位置 pos = lc; //继续向下调整 &#125;&#125; 该筛选算法的时间复杂度为O(logn) 堆的插入插入操作：将插入元素加到堆尾，此时须判别堆尾和其双亲结点是否满足堆特性，若不满足，则需要进行向上调整，将插入元素与双亲交换；交换后，插入元素若存在双亲且此双亲结点不满足堆特性，则需要继续重复上述过程。 步骤： 将插入元素加到堆尾，并用 curr 指示堆尾 若 curr 指示堆尾，插入操作结束，否则，将 curr 结点与其双亲结点比较，若 curr 结点较优先则交换， curr 上移，重复本步骤；否则操作结束 算法如下： 123456789101112Status InsertHeap(Heap &amp;H, RcdType e) &#123; //将结点 e 插入至堆H中 int curr; if(H.n&gt;=H.size-1) return ERROR; //堆已满，插入失败 curr = ++H.n; H.rcd[curr] = e; //将插入元素加到堆尾 while(1!=curr &amp;&amp; H.prior(H.rcd[curr].key,H.rcd[curr/2].key))&#123; swapHeapElem(H, curr, curr/2); //交换curr与curr/2结点，向上调整 curr /=2; &#125; return OK;&#125; 该插入算法的时间复杂度为O(logn)。 筛选与插入区别： 筛选操作是叶子节点向上调整； 插入操作是叶子节点向下调整 建堆 单节点的完全二叉树满足堆特性，叶子结点都是堆 n 个结点的完全二叉树建堆，须将以编号为n/2、n/2-1、…、1的结点为根的子树筛选为子堆 算法如下: 1234567891011void MakeHeap(Heap &amp;H, RcdType *E, int n, int size, int tag,int (* prior)(KeyType,KeyType)) &#123; //prior 为自定义的优先函数 int i; //初始化 H.rcd = E; H.n = n; H.size = size; H.tag = tag; H.prior = prior; //对以i结点为根的子树进行筛选 for(i=n/2; i&gt;0; i--) &#123; ShiftDown(H, i); &#125;&#125; 该建堆算法的时间复杂度为O(n)。 删除堆顶结点操作：删除堆顶结点后，需对新的堆顶结点进行筛选 算法如下： 123456789Status RemoveFirstHeap(Heap &amp;H, RcdType &amp;e) &#123; //删除堆H的堆顶结点，并用e返回 if(H.n&lt;=0) return ERROR; //堆已满，插入失败 e =H.rcd[1]; //取堆顶结点 swapHeapElem(H, 1, H.n); //交换堆顶与堆尾结点， H.n--; //堆长度减1 if(H.n&gt;1) ShiftDown(H, 1);//对新的堆顶结点进行筛选 return OK;&#125; 堆排序堆排序属于选择类排序。 选择类排序的基本思想：在 n 个记录中，第 i 趟（i = 1,2,..,n-1）在第 i 到 n 个记录中选取关键字最小的记录作为有序序列中的第 i 个记录。选取最小关键字的策略决定了选择类排序算法的效率。 堆排序可采用大顶堆进行升序排序，采用小顶堆进行降序排序。 以大顶堆升序排序为例 先将待排序列建成大顶堆 将堆顶与堆尾交换位置（也就是删除堆顶结点操作），堆长度-1，取堆顶结点进新序列 对新的堆顶结点进行筛选，得到次大值结点 重复以上步骤，可得一个升序序列 算法如下： 12345678910void HeapSort(RcdSqList &amp;L) &#123;//L为待排序列 Heap H; RcdType e; int i; //将待排序列建成大顶堆 MakeHeap(H, L.rcd, L.length, L.size, 1, greatPrior); //对以i结点为根的子树进行筛选 for(i=H.n; i&gt;0; i--) &#123; //交换堆顶与堆尾结点，堆长度减1，筛选新的堆顶结点 RemoveFirstHeap(H, e); &#125;&#125; 堆排序算法的时间复杂度最坏为O(nlogn)，空间复杂度为O(1)。 附上一张总结图]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二叉树学习笔记（一）之遍历二叉树]]></title>
    <url>%2F2018%2F12%2F06%2F%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[前言 考试月了，得好好学习下数据结构，本文主要总结了二叉树的四种遍历方法以及所对应的递归与非递归实现方式 二叉树基础知识概念 二叉树定义：含有n（n&gt;=0）个节点的有限集合 非空二叉树中： 有且仅有一个根节点 其余节点划分为两个互不相交的子集L和R，L称为左子树，R称为右子树 任一结点的左、右子树的根称为该结点的左、右孩子，反过来，该结点称为孩子的双亲 度：结点的孩子个数 叶子结点：度为0 的结点 非叶子结点：度大于0，也称为内部结点或分支结点 二叉树的深度（或高度）：结点的最大层次称为二叉树的深度（或高度）。（所谓层次，根节点即为第一层，以此类推） 二叉树的性质 在非空二叉树的第 i 层上最多右 2^(i-1) 个结点（i&gt;=1） 深度为 k 的二叉树最多有 2^k - 1 个结点（k&gt;=1） 对于任意一颗二叉树，如果度为 0 的结点个数为 n0 ,度为 2 的结点个数为 n2，则 n0 = n2+1 具有 n 个结点的完全二叉树的深度 k = [log2n] + 1 对于含 n 个结点的完全二叉树中编号为 i (1&lt;=i&lt;=n) 的结点 如果 i = 1，则 i 结点是这颗完全二叉树的根，没有双亲；否则其双亲的编号为 [i/2] 如果 2i&gt;n，则 i 结点没有左孩子；否则其左孩子的编号为 2i 如果 2i+1&gt;n，则 i 结点没有右孩子；否则其右孩子的编号为 2i+1 满二叉树与完全二叉树 满二叉树：深度为 k 且有 2^k - 1 个结点的二叉树 完全二叉树：完全二叉树是效率很高的数据结构，完全二叉树是由满二叉树而引出来的。深度为K且含 n 个结点的二叉树，如果其每一个结点都与深度为K的满二叉树中编号从1至n的结点一一对应，则称之为完全二叉树。换句话讲，在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。 二叉树的存储结构顺序存储123456// 一维数组实现typedef char TElemType; // 假设结点元素类型为字符typedef struct &#123;TElemType * elem; // 0号单元闲置int lastIndex; // 二叉树最后一个结点的编号&#125; SqBiTree; 链式存储 二叉链表 1234typedef struct BiTNode&#123; TElemType data; // 数据域 struct BiTNode *lchild,*rchild; // 左、右孩子指针域&#125; BiTNode,*BiTNode; 三叉链表 1234typedef struct TriTNode&#123; TElemType data; // 数据域 struct TriTNode *parent,*lchild,*rchild;// 双亲左、右孩子指针域&#125; TriTNode,*TriTNode; 二叉树的遍历首先来认识一下遍历遍历：树的遍历（也称为树的搜索）是图的遍历的一种，指的是按照某种规则，不重复地访问某种树的所有结点，使得每个结点被且仅被访问的过程。具体的访问操作可能是检查节点的值、更新节点的值等。二叉树的遍历也适用于其它树的遍历。 遍历是二叉树的一类重要操作，也是二叉树的其他一些操作和各种应用算法的基本框架。 遍历有两种类别，一种是深度优先遍历，另一种是广度优先遍历 深度优先遍历：先访问子节点，再访问父节点，最后是第二个子节点 先序遍历：VLR，即根结点-&gt;左结点-&gt;右节点 中序遍历：LVR，即左结点-&gt;根结点-&gt;右节点 后序遍历：LRV，即左结点-&gt;右结点-&gt;根节点 广度优先遍历：先访问第一个子节点，再访问第二个子节点，最后访问父节点，二叉树的广度优先遍历就是层次遍历 由于从给定的某个节点出发，有多个可以前往的下一个节点（树不是线性数据结构），所以在顺序计算（即非并行计算）的情况下，只能推迟对某些节点的访问——即以某种方式保存起来以便稍后再访问。常见的做法是采用栈（LIFO）或队列（FIFO）。由于树本身是一种自我引用（即递归定义）的数据结构，因此很自然也可以用递归方式。 所以，下面我重点总结了这两种不同的遍历实现方式。 注：本文所讲的数据结构均为C语言版 先序遍历递归遍历123456789Status PreOrderTraverse(BiTree T,Status(*visit)(TElemType e))&#123; if(NULL == T) return OK; if(ERROR == visit(T-&gt;data)) return ERROR; //访问结点的数据域 if(ERROR == InOrderTraverse(T-&gt;lchild,visit)) return ERROR; //递归遍历T的左子树 return InOrderTraverse(T-&gt;rchild,visit);//递归遍历T的右子树 &#125; 非递归遍历1.使用栈的非递归先序遍历算法 12345678910111213141516171819202122232425262728293031323334/**********二叉链表类型定义：typedef struct BiTNode &#123; TElemType data; struct BiTNode *lchild,*rchild;&#125; BiTNode, *BiTree;栈类型Stack的相关定义：typedef BiTree SElemType; // 栈的元素类型Status InitStack(Stack &amp;S); // 初始化栈Status StackEmpty(Stack S); // 判栈空Status Push(Stack &amp;S, SElemType e); // 进栈Status Pop(Stack &amp;S, SElemType &amp;e); // 出栈 Status GetTop(Stack S, SElemType &amp;e); // 取栈顶元素**********/void PreOrder(BiTree T, void (*visit)(TElemType))/*对每个结点的元素域data调用函数visit进行访问 */&#123; Stack S; InitStack(S); BiTree p = T; // 先序访问根节点，遍历左节点 ，左节点入栈 // StackEmpty(Stack S);S为空返回true反之false; // 当栈不空或 p非空时 while(!StackEmpty(S) || p!=NULL)&#123; while(p!=NULL)&#123; visit(p-&gt;data); Push(S,p); p = p-&gt;lchild; &#125; if(!StackEmpty(S))&#123; Pop(S,p); // 执行完 p指向S出栈的元素 p = p-&gt;rchild; &#125; &#125;&#125; 2.不使用栈，使用三叉链表的非递归先序遍历算法 12345678910111213141516171819202122232425262728293031/********** 三叉链表类型定义： typedef struct TriTNode &#123; TElemType data; struct TriTNode *parent, *lchild, *rchild; &#125; TriTNode, *TriTree; **********/ void PreOrder(BiTree T, void (*visit)(TElemType))&#123; TriTree p, pr; if(T!=NULL)&#123; p = T; while(p!=NULL)&#123; visit(p-&gt;data);//输出当前的结点 if(p-&gt;lchild!=NULL)&#123; p = p-&gt;lchild;//若有左孩子，继续访问 &#125; else if(p-&gt;rchild!=NULL)&#123; p = p-&gt;rchild;//若有右孩子，继续访问 &#125; else&#123; //沿双亲指针链查找，找到第一个由右孩子的p结点 //找不到则结束 do&#123; pr = p; p = p-&gt;parent; &#125;while(p!=NULL&amp;&amp;(p-&gt;rchild==pr||NULL==p-&gt;rchild)) //p有右孩子但不是pr，结束循环 if(p) p = p-&gt;rchild;//找到后，p指向右孩子结点 &#125; &#125; &#125;&#125; 中序遍历递归遍历123456789Status InOrderTraverse(BiTree T,Status(*visit)(TElemType e))&#123; if(NULL == T) return OK; if(ERROR == InOrderTraverse(T-&gt;lchild,visit)) return ERROR; //递归遍历T的左子树 if(ERROR == visit(T-&gt;data)) return ERROR; //访问结点的数据域 return InOrderTraverse(T-&gt;rchild,visit));//递归遍历T的右子树 &#125; 非递归遍历1.使用栈的非递归中序遍历算法 12345678910111213141516171819202122232425262728293031323334353637383940/**********二叉链表类型定义：typedef struct BiTNode &#123; TElemType data; struct BiTNode *lchild,*rchild;&#125; BiTNode, *BiTree;栈类型Stack的相关定义：typedef BiTree SElemType; // 栈的元素类型Status InitStack(Stack &amp;S); // 初始化栈Status StackEmpty(Stack S); // 判栈空Status Push(Stack &amp;S, SElemType e); // 进栈Status Pop(Stack &amp;S, SElemType &amp;e); // 出栈 Status GetTop(Stack S, SElemType &amp;e); // 取栈顶元素**********/BiTNode *GoFarLeft(BiTree T,Stack &amp;S)&#123; //从T结点出发，沿左分支走到底，沿途结点的指针入栈S，返回左上结点的指针 if(!T) return NULL; while(T-&gt;lchild!=NULL)&#123; Push(S,T); T = T-&gt;lchild; &#125; return T;&#125; void InOrderTraverse(BiTree T,void(*visit)(TElemType e))&#123; Stack S; InitStack(S); BiTree p； p = GoFarLeft(T, S);//找到最左下的结点，并将沿途结点的指针入栈S while(p!=NULL)&#123; visit(p-&gt;data);//访问结点 if(p-&gt;rchild!=NULL)&#123; //令p指向其右孩子为根的子树的最左下结点 p = GoFarLeft(p-&gt;rchild, S); &#125; else if(!StackEmpty(S))&#123; //栈不空时退栈 Pop(S,p); &#125; else p = NULL;//栈空表明遍历结束 &#125;&#125; 2.不使用栈，使用三叉链表的非递归中序遍历算法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/********** 三叉链表类型定义： typedef struct TriTNode &#123; TElemType data; struct TriTNode *parent, *lchild, *rchild; &#125; TriTNode, *TriTree; **********/ void InOrder(TriTree PT, void (*visit)(TElemType))&#123; TriTree p=PT, pr; while(NULL != p) &#123; if (p-&gt;lchild != NULL) &#123; p = p-&gt;lchild; //寻找最左下结点 &#125; else &#123; visit(p-&gt;data); //当前节点左子树为空，但右子树不一定为空， //所以该节点可能是这个子树的根节点，要先访问， //如果有右节点，才能在右节点之前访问 if (p-&gt;rchild != NULL) &#123; //若有右子树，转到该子树，继续寻找最左下结点 p =p-&gt;rchild; &#125; else &#123; //执行到这里 //p 要不是最左下节点，要不是没有孩子的右节点 //其实也就是叶子节点 pr = p; //否则返回其父亲 p = p-&gt;parent; while (p != NULL &amp;&amp; (p-&gt;lchild != pr || NULL == p-&gt;rchild))//若其不是从左子树回溯来的，或左结点的父亲并没有右孩子 &#123; if (p-&gt;lchild == pr) &#123;//若最左结点的父亲并没有右孩子 visit(p-&gt;data);//直接访问父亲 &#125; pr = p; //父亲已被访问，故返回上一级 p = p-&gt;parent; //该while循环沿双亲链一直查找，若无右孩子则访问 //直至找到第一个有右孩子的结点为止 //（但不访问该结点，留给下步if语句访问 &#125; if (NULL != p) &#123; //访问父亲，并转到右孩子 //（经上步while处理，可以确定此时p有右孩子） visit(p-&gt;data); p = p-&gt;rchild; &#125; &#125; &#125; &#125;&#125; 后序遍历递归遍历123456789Status PostOrderTraverse(BiTree T,Status(*visit)(TElemType e))&#123; if(NULL == T) return OK; if(ERROR == InOrderTraverse(T-&gt;lchild,visit)) return ERROR; //递归遍历T的左子树 if(ERROR == InOrderTraverse(T-&gt;rchild,visit)) return ERROR; //递归遍历T的右子树 return visit(T-&gt;data);//访问结点的数据域 &#125; 非递归遍历1.使用栈的非递归后序遍历算法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/**********二叉链表类型定义：typedef struct BiTNode &#123; TElemType data; struct BiTNode *lchild,*rchild;&#125; BiTNode, *BiTree;为分辨后序遍历时两次进栈的不同返回点，需在指针进栈时同时将一个标志进栈typedef struct &#123; struct BiTNode *ptr; // 二叉树结点的指针类型 int tag; // 标志 值为 0 或 1&#125; SElemType; // 栈的元素类型栈类型Stack的相关定义：typedef BiTree SElemType; // 栈的元素类型Status InitStack(Stack &amp;S); // 初始化栈Status StackEmpty(Stack S); // 判栈空Status Push(Stack &amp;S, SElemType e); // 进栈Status Pop(Stack &amp;S, SElemType &amp;e); // 出栈 Status GetTop(Stack S, SElemType &amp;e); // 取栈顶元素**********/void PostOrder(BiTree T, void (*visit)(TElemType))/* 使用栈，非递归后序遍历二叉树T， *//* 对每个结点的元素域data调用函数visit */&#123; Stack S; InitStack(S); SElemType e; BiTree p=T; e.tag=0; while((!StackEmpty(S)||p==T)&amp;&amp;T!=NULL)&#123; while(p)&#123;// 这个小 while循环的目的是先遍历每个子树的左节点到底，并将沿途的左节点入栈 e.ptr=p; e.tag=0; Push(S,e); // 入栈 p=p-&gt;lchild; &#125;// 小while结束，此时的栈顶元素也就是要访问的起始节点 if(!StackEmpty(S))&#123; // tag==1，e为第二次出现在栈顶 Pop(S,e); // 取出栈顶元素，并返回给e,e指向出栈元素，方便下面的tag值判断 if(e.tag == 1) &#123; p=e.ptr; visit(p-&gt;data);// 访问该结点 p = NULL; &#125; else &#123; p=e.ptr; if(p-&gt;rchild)&#123; // 如果存在右子树，设tag == 1 e.tag=1; Push(S,e); // 重新入栈，它是根节点，留着等下再访问 p=p-&gt;rchild; // 使 p指向右子树 &#125; else&#123;//没有右子树 ，直接访问该节点 p=e.ptr; visit(p-&gt;data); p = NULL; &#125; &#125; &#125; else&#123;//栈空则 p为NULL p=NULL; &#125; &#125;//大while结束 &#125; 2.不使用栈，使用三叉链表的非递归后序遍历算法 123456789101112131415161718192021222324252627282930313233343536/********** 在三叉链表的结点中增设一个标志域 (mark取值0,1或2)以区分遍历过程中到达该结点时应继续向左或向右或访问该结点带标志域的三叉链表类型定义： typedef struct TriTNode &#123; TElemType data; struct TriTNode *lchild, *rchild, *parent; int mark; // 标志域 &#125; TriTNode, *TriTree; **********/ void PostOrder(TriTree T, void (*visit)(TElemType)) /* 不使用栈，非递归后序遍历二叉树T， */ /* 对每个结点的元素域data调用函数visit */ &#123; //mark == 0 向左访问，1 访问自身，2 向右访问 TriTree p= T, pr; if(p==NULL) return ; while(true)&#123; while(p!=NULL&amp;&amp;p-&gt;mark!=1)&#123; if(p-&gt;rchild!=NULL) //若有右孩子 p-&gt;mark=2; else p-&gt;mark=1; pr=p; p=p-&gt;lchild; &#125; p=pr; // p为最左下节点，可能有右孩子 pr=pr-&gt;parent; if(p-&gt;mark==2) &#123; // p有右孩子 p-&gt;mark=1; // p访问完右边后下次要访问自己 p=p-&gt;rchild; &#125; else&#123; visit(p-&gt;data); // 访问 p-&gt;mark=1; &#125; if(p-&gt;data==T-&gt;data) break; &#125; &#125; 层次遍历层次遍历是按二叉树的层次从小到大且每层从左到右的顺序依次访问结点 对于顺序存储结构的二叉树，其结点在数组中的顺序下标序列与层次遍历的访问顺序一致，因此可直接根据数组得到层次遍历的结果。 对于链式存储结构的二叉树，难以获得结点的同一层的下一层结点，从层末结点也难以得到下一层的层首结点。所以可使用一个辅助队列存储当前层被访问过的结点。 使用队列的非递归遍历算法如下： 12345678910111213141516171819202122232425262728/**********二叉链表类型定义：typedef struct BiTNode &#123; TElemType data; struct BiTNode *lchild,*rchild;&#125; BiTNode, *BiTree;**********/void LevelOrderTraverse(BiTree T,Status(*visit)(TEleType e))&#123; if(T!=NULL)&#123; Queue Q; InitQueue(Q); BiTree p = T; //初始化 visit(p-&gt;data); //访问根节点 EnQueue(Q,p); //并将根节点入队 &#125; while(OK==DeQueue(Q,p))//当队非空时重复执行出队操作 &#123; if(p-&gt;lchild!=NULL)//访问左孩子并入队 &#123; visit(p-&gt;lchild-&gt;data); EnQueue(Q,p-&gt;lchild); &#125; if(p-&gt;rchild!=NULL)//访问右孩子并入队 &#123; visit(p-&gt;rchild-&gt;data); EnQueue(Q,p-&gt;rchild); &#125; &#125;&#125; 遍历的应用求二叉树深度利用后序遍历框架递归求左、右子树深度，然后取两者的较大值加 1（根节点）作为深度值返回。代码如下： 123456789int BiTreeDepth(BiTree T)&#123; int depthLeft,depthRight; if(NULL==T) return 0; //二叉树深度为0 else&#123; depthLeft = BiTreeDepth(T-&gt;lchild); depthRight = BiTreeDepth(T-&gt;rchild); return 1+((depthLeft&gt;depthRight)?depthLeft:depthRight); &#125;&#125; 叶子节点计数利用先序遍历框架递归实现，算法如下： 123456789void CountLeaf(BiTree T, int &amp;count)&#123; if(T!=NULL)&#123; if(NULL == T-&gt;lchild &amp;&amp; NULL == T-&gt;rchild)&#123; count++; // 对叶子结点计数 &#125; CountLeaf(T-&gt;lchild, count); // 对左子树递归计数 CountLeaf(T-&gt;rchild, count); // 对右子树递归计数 &#125;&#125; 销毁二叉树代码如下： 1234567void DestroyBiTree(BiTree &amp;T)&#123; if(T!=NULL)&#123; DestroyBiTree(T-&gt;lchild);// 递归销毁左子树 DestroyBiTree(T-&gt;rchild);// 递归销毁右子树 free(T); // 释放根节点 &#125;&#125; 删除指定元素结点的子树代码如下： 123456789void ReleaseX(BiTree &amp;T, char x)/* 对于二叉树T中每一个元素值为x的结点， *//* 删去以它为根的子树，并释放相应的空间 */&#123; if(!T) return ; ReleaseX(T-&gt;lchild,x); ReleaseX(T-&gt;rchild,x); if(T-&gt;data == x) free(T);&#125; 复制二叉树代码如下： 12345678910111213void CopyBiTree(BiTree T, BiTree &amp;TT)/* 递归复制二叉树T得到TT */&#123; TT = (BiTree)malloc(sizeof(BiTNode)); if(T)&#123; TT-&gt;data = T-&gt;data; TT-&gt;lchild = T-&gt;lchild; TT-&gt;rchild = T-&gt;rchild; if(T-&gt;lchild) CopyBiTree(T-&gt;lchild,TT-&gt;lchild); if(T-&gt;rchild)CopyBiTree(T-&gt;rchild,TT-&gt;rchild); &#125; else free(TT);&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单中缀表达式求值]]></title>
    <url>%2F2018%2F11%2F21%2F%E7%AE%80%E5%8D%95%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%2F</url>
    <content type="text"><![CDATA[这是很久很久之前写的一个小作业，利用栈实现的一个简单中缀表达式求值，所谓前缀、中缀、后缀，是指运算符相对于运算数的位置而言。这个是中缀，所以实现其实很简单 ，只有加、减、乘、除以及括号的四则运算，大致思路是定义了两个栈：操作符栈和操作数栈，顾名思义，操作符用于存放运算符，操作数用于存放运算数字。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;stdbool.h&gt;/*** 操作栈的相关定义 */typedef struct &#123; char *elem; int top; int size; &#125;Sqstack; //定义操作符栈和操作数栈 Sqstack Ope; Sqstack Num; void Initstack(Sqstack *s) //初始化栈 &#123; s-&gt;size=50; s-&gt;top=0; s-&gt;elem=(char*)malloc(s-&gt;size*sizeof(char)); if(!s-&gt;elem) printf("OVERFLOW"); &#125; void Push(Sqstack *s,char e) //入栈 &#123; if(s-&gt;top&gt;=s-&gt;size)//栈内存不够时 &#123; char *newelem; int increment=50; newelem=(char*)realloc(s-&gt;elem,(s-&gt;size+increment)*sizeof(char)); s-&gt;elem=newelem; s-&gt;size=s-&gt;size+increment; &#125; s-&gt;elem[s-&gt;top]=e; s-&gt;top++; &#125; void Pop(Sqstack *s)//出栈 &#123; s-&gt;top--;&#125; char GetTop(Sqstack *s)//取栈顶元素&#123; char e; s-&gt;top--; e=s-&gt;elem[s-&gt;top]; return e;&#125;void calculate(Sqstack *ope,Sqstack *num)&#123; char num1,num2,op; num2=GetTop(num); num1=GetTop(num); op=GetTop(ope); int tmpResult=0; switch(op) &#123; case '+': tmpResult=num1+num2; break; case '-': tmpResult=num1-num2; break; case '*': tmpResult=num1*num2; break; case '/': tmpResult=num1/num2; break; &#125; Push(num,tmpResult);//入栈 &#125; void dealExpression()&#123; Initstack(&amp;Ope); Initstack(&amp;Num); printf("请输入正确的中缀表达式(以#号结束)："); char onechar; //单个字符 scanf("%c",&amp;onechar); while(onechar!='#') &#123; switch(onechar) &#123; case '+': case '-': if(Ope.top&amp;&amp;Ope.elem[Ope.top-1]!='(') &#123; calculate(&amp;Ope,&amp;Num); &#125; Push(&amp;Ope,onechar); //入栈 scanf("%c",&amp;onechar); break; case '*': case '/': if(Ope.top&amp;&amp;(Ope.elem[Ope.top-1]=='*'||Ope.elem[Ope.top-1]=='/')) &#123; calculate(&amp;Ope,&amp;Num); &#125; Push(&amp;Ope,onechar); //入栈 scanf("%c",&amp;onechar); break; case '(': Push(&amp;Ope,onechar); //入栈 scanf("%c",&amp;onechar); break; case ')': while(Ope.elem[Ope.top-1]!='(')//当前是')'，则Ope栈一定能有'('匹配到,即Ope栈一定不为空 &#123; calculate(&amp;Ope,&amp;Num); &#125; Pop(&amp;Ope);//出栈，弹出左括号 scanf("%c",&amp;onechar); break; default://onechar为数字，则入num栈 char opNum=0; do&#123; opNum=opNum*10+onechar-'0'; scanf("%c", &amp;onechar); &#125;while(onechar&gt;='0' &amp;&amp; onechar&lt;='9'); Push(&amp;Num,opNum); break; &#125;//end switch &#125;//end while while(Ope.top) &#123; calculate(&amp;Ope,&amp;Num); &#125; int result; result=Num.elem[Num.top-1]; printf("计算结果是%d\n", result); &#125; int main()&#123; dealExpression(); return 0; &#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[matlab学习小结]]></title>
    <url>%2F2018%2F11%2F06%2Fmatlab%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言 maltab选修课上学到的一些基础知识… 冒号操作符：关于冒号操作符的教程 x = i:j:k 创建一个固定间隔向量 x，x值从i到k,j为增量 A(:,n) 是矩阵 A 的第 n 列 A(m,:) 是矩阵 A 的第 m 行 A(:,:,p) 是三维数组 A 的第 p 页，即可以同时表示一个二维矩阵的多种改变后的状态 A(:) 将 A 中的所有元素重构成一个列向量。如果 A 已经是列向量，则此表达式没有任何作用 A(:,:) 将 A 中的所有元素重构成一个二维矩阵。如果 A 已经是矩阵或向量，则此表达式没有任何作用 A(j:k) 使用向量 j:k 对 A 进行索引，因此相当于向量 [A(j), A(j+1), …, A(k)]。使用时要注意下标是否越界 A(:,j:k) 包含第一个维度中的所有下标，但使用向量 j:k 对第二个维度进行索引。这样将返回包含列 [A(:,j), A(:,j+1), …, A(:,k)] 的矩阵，使用时要同样注意下标是否越界 矩阵创建矩阵 ;分割 a = [1 2 3; 4 5 6; 7 8 10] 使用ones,zeros,rand等函数 比如初始化空矩阵a = zeros[5,3]; format long 显示更多小数位数 运算 a*b为矩阵运算 a.*b为数组运算 x‘：共轭转置 数组 []或：创建 使用函数linspace创建 x= linspace(x1, x2, n) 二维数组用;分割 在 MATLAB 的数据类型中，向量可视为一维数组，矩阵可视为二维数组，对于维数(Dimensions)超过2的数组均可视为「多维数组」 多项式曲线拟合原理用一个较简单的函数去逼近一个复杂的或未知的函数。常采用最小二乘原理，构造m次的拟合多项式 1p(x)=a_&#123;m&#125;x^m + a_&#123;m-1&#125;x^&#123;m-1&#125;+...+a_&#123;1&#125;+a_&#123;0&#125; 使该多项式在各节点处的偏差 1p(x_&#123;i&#125;)-y_&#123;i&#125; 的平方和 1\sum_&#123;i=0&#125;^n(p(x_&#123;i&#125;)-y_&#123;i&#125;)^2 达到最小 实现步骤用polyfit函数求得最小二乘拟合多项式的系数，再用polyval函数按所得的多项式计算所给出的点上的函数近似值 polyfit P = polyfit(x,y,n) 返回阶数为 n 的多项式 p(x) 的系数 [p,S] = polyfit(x,y,n) S为结构体，用作 polyval 的输入来获取误差估计值 [p,S,mu] = polyfit(x,y,n) mu,是一个二元素向量，包含中心化值和缩放值 polyval y=polyval(P,x) 注：P = polyfit(x,y,n) 返回在 x 处计算的 n 次多项式的值 corrcoef相关系数R = corrcoef(A); 返回 A 的相关系数的矩阵，其中 A 的列表示随机变量，行表示观测值 R = corrcoef(A,B); 返回两个随机变量 A 和 B 之间的系数。 把for循环中的数据动态存入到数组中123456789101112%第一种for i=1:12x(i)=i^2; %把每一个结果x(i)存到数组x中end%第二种a0=[];for i=1:12x=i^2;A=[a0,x]; %把结果x存到数组A中a0=A;end]]></content>
      <categories>
        <category>maltab</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 transform属性及其matrix矩阵学习]]></title>
    <url>%2F2018%2F10%2F23%2F%E5%AF%B9CSS3%20transform%E5%B1%9E%E6%80%A7%E7%9A%84%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[前言 最近做的一个小网页里需要写一个小转盘，在获取旋转角度时，发现transform的返回值是一段奇怪的参数，后来多方查阅后才了解，返回值是一个matrix()矩阵，matrix()这个东西，其实表示的是使元素发生变化的本质… 首先回顾transform属性的相关知识先理解网页上的x,y轴 transform属性1.偏移 transform: translate(x,y) ：移动元素位置，x,y为水平和竖直移动的距离，单位是px translateX(x) 定义转换，只是用 X 轴的值。 测试 translateY(y) 定义转换，只是用 Y 轴的值。 测试 translateZ(z) 2.旋转 transform: rotate(x deg)：2D旋转x度，正值顺时针转，负值逆 3D旋转 rotateX() rotateY() rotateZ() 默认旋转的基点是元素中心点 3.倾斜 transform: skew(x deg,y deg):2D倾斜，x,y为沿x,y轴倾斜的角度 skewX() skewY() skew默认旋转的基点是中心点 当倾斜的角度大于45度时，实际看到的元素是反过来的，无论怎么倾斜，元素在x,y轴的投影与原始宽高一致,所以元素才会变形 skew(60deg,60deg) 黄框为原始大小 4.缩放 transform: scale(x,y) ：2D缩放,加参数z可3D缩放，x,y,z数值为缩放倍率如1.5 scaleX(x) 通过设置 X 轴的值来定义缩放 scaleY(y) 通过设置 Y 轴的值来定义缩放 scaleZ(z) transform-origin属性设置旋转的基点 transform-origin: x-axis y-axis z-axis; x值可以是left/right,center，%，具体px y值可以是top/bottom,center，%，具体px z值自然为z轴的具体坐标 transform属性的matrix()如果是2D变换，括号里就是6个值的矩阵，如果是3D变换，括号里就是4*4的16个值的矩阵，以下我们讨论的是2D变换 写法如下： 1transform: matrix(a,b,c,d,e,f); a,b,c,d,e,f的六个参数实际上对应的是一个矩阵 而如果要使元素的坐标变化，其中是实现原理如下： x,y是元素的原坐标，ax+cy+e对应的是变换后的x轴坐标 x’ ，bx+dy+f对应的是变换后的y轴坐标 y’ 偏移(translate) 显然，在a,b,c,d值不改变的情况下，改变e,f的值就是改变 x’ ,y’ 的常数项 所以，若只改变e,f的值，就相当于改变元素的偏移，(e,f)其实就是元素的中心点位置坐标 实际上也就是 1transform: matrix(a, b, c, d, e, f); 相当于 1transform: translate(e px, f px); 缩放(scale) 再观察矩阵的式子，缩放就是改变x,y的系数的倍数 显然，若改变x系数倍数而不改变y系数，则只改变a的值 同理，改变y则需只改变d的值 所以 1transform: matrix(a, 0, 0, d, 0, 0); 相当于 1transform: scale(a, d); 旋转(rotate) 旋转相对复杂些，涉及到三角函数的变换，与a,b,c,d参数有关 1transform: matrix(cosθ,sinθ,-sinθ,cosθ,0,0) 矩阵变换实际长这样 所以 1transform: matrix(cosθ,sinθ,-sinθ,cosθ,0,0) 相当于 1transform: transform:rotate(θ化为弧度制 deg); 若需要获取元素的rotate(θ)的旋转角度θ，则需要利用返回值中的参数值cosθ与sinθ 问题也就转化为：已知sinθ和cosθ，求θ值。这里就需要用到反三角函数了，是个数学问题。 倾斜(skew) 倾斜也涉及三角函数，不过只改变的是tanθ的值，只与b,c参数有关，方法如下： 1transform: matrix(1,tan(θy),tan(θx),1,0,0) 利用矩阵运算后的结果： x’ = x+ytan(θx)+0 = x+ytan(θx) y’ = xtan(θy)+y+0 = xtan(θy)+y 所以 1transform: matrix(cosθ,sinθ,-sinθ,cosθ,0,0) 相当于 1transform: rotate(θ化为弧度制deg); matrix()的优点 相比translate、scale、rotate、skew，matrix()可以实现镜像对称，其实原理就是相对于y=tanθ x直线进行翻转，下面是具体方法（k=θ） 1transform: matrix((1-k*k) / (1+k*k), 2k / (1 + k*k), 2k / (1 + k*k), (k*k - 1) / (1+k*k), 0, 0)]]></content>
      <categories>
        <category>前端基础学习</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何优雅的使用本博客]]></title>
    <url>%2F2018%2F10%2F21%2F%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[请输入密码 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>使用教程</category>
      </categories>
  </entry>
</search>
