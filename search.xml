<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>二叉树学习笔记之遍历二叉树</title>
      <link href="/2018/12/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/12/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言 </p></blockquote><p>考试月了，得好好学习下数据结构</p><a id="more"></a><h1 id="二叉树基础知识"><a href="#二叉树基础知识" class="headerlink" title="二叉树基础知识"></a>二叉树基础知识</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>二叉树定义：含有n（n&gt;=0）个节点的有限集合</li><li>非空二叉树中：<ul><li>有且仅有一个根节点</li><li>其余节点划分为两个互不相交的子集L和R，L称为左子树，R称为右子树</li></ul></li><li>任一结点的左、右子树的根称为该结点的左、右孩子，反过来，该结点称为孩子的双亲</li><li>度：结点的孩子个数</li><li>叶子结点：度为0 的结点</li><li>非叶子结点：度大于0，也称为内部结点或分支结点</li><li>二叉树的深度（或高度）：结点的最大层次称为二叉树的深度（或高度）。（所谓层次，根节点即为第一层，以此类推）</li></ul><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><ol><li>在非空二叉树的第 i 层上最多右 2^(i-1) 个结点（i&gt;=1）</li><li>深度为 k 的二叉树最多有 2^k - 1 个结点（k&gt;=1）</li><li>对于任意一颗二叉树，如果度为 0 的结点个数为 n0 ,度为 2 的结点个数为   n2，则 n0 = n2+1</li><li>具有 n 个结点的完全二叉树的深度 k = [log2n] + 1</li><li>对于含 n 个结点的完全二叉树中编号为 i (1&lt;=i&lt;=n) 的结点<ol><li>如果 i = 1，则 i 结点是这颗完全二叉树的根，没有双亲；否则其双亲的编号为 [i/2]</li><li>如果 2i&gt;n，则 i 结点没有左孩子；否则其左孩子的编号为 2i</li><li>如果 2i+1&gt;n，则 i 结点没有右孩子；否则其右孩子的编号为 2i+1</li></ol></li></ol><h2 id="满二叉树与完全二叉树"><a href="#满二叉树与完全二叉树" class="headerlink" title="满二叉树与完全二叉树"></a>满二叉树与完全二叉树</h2><ul><li><p><strong>满二叉树</strong>：深度为 k 且有 2^k - 1 个结点的二叉树</p></li><li><p><strong>完全二叉树</strong>：完全二叉树是效率很高的数据结构，完全二叉树是由<a href="https://baike.baidu.com/item/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="noopener">满二叉树</a>而引出来的。深度为K且含 n 个结点的二叉树，如果其每一个结点都与深度为K的满二叉树中编号从1至n的结点一一对应，则称之为完全二叉树。换句话讲，在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。</p><p><img src="https://i.loli.net/2018/12/07/5c0952c618ebb.png" alt=""></p></li></ul><h1 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h1><h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一维数组实现</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;  <span class="comment">// 假设结点元素类型为字符</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">TElemType * elem;      <span class="comment">// 0号单元闲置</span></span><br><span class="line"><span class="keyword">int</span> lastIndex;      <span class="comment">// 二叉树最后一个结点的编号</span></span><br><span class="line">&#125; SqBiTree;</span><br></pre></td></tr></table></figure><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><ul><li>二叉链表</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;  <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">// 左、右孩子指针域</span></span><br><span class="line">&#125; BiTNode,*BiTNode;</span><br></pre></td></tr></table></figure><ul><li>三叉链表</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TriTNode</span>&#123;</span></span><br><span class="line">    TElemType data;  <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TriTNode</span> *<span class="title">parent</span>,*<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">// 双亲左、右孩子指针域</span></span><br><span class="line">&#125; TriTNode,*TriTNode;</span><br></pre></td></tr></table></figure><h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><h2 id="首先来认识一下遍历"><a href="#首先来认识一下遍历" class="headerlink" title="首先来认识一下遍历"></a>首先来认识一下遍历</h2><p><strong>遍历</strong>：树的遍历（也称为树的搜索）是图的遍历的一种，指的是按照某种规则，不重复地访问某种树的所有结点，使得每个结点被且仅被访问的过程。具体的访问操作可能是检查节点的值、更新节点的值等。二叉树的遍历也适用于其它树的遍历。</p><p>遍历是二叉树的一类重要操作，也是二叉树的其他一些操作和各种应用算法的基本框架。</p><p>遍历有两种类别，一种是深度优先遍历，另一种是广度优先遍历</p><ul><li><p>深度优先遍历：先访问子节点，再访问父节点，最后是第二个子节点</p><ul><li>先序遍历：VLR，即根结点-&gt;左结点-&gt;右节点</li><li>中序遍历：LVR，即左结点-&gt;根结点-&gt;右节点</li><li>后序遍历：LRV，即左结点-&gt;右结点-&gt;根节点</li></ul></li><li><p>广度优先遍历：先访问第一个子节点，再访问第二个子节点，最后访问父节点，二叉树的广度优先遍历就是层次遍历</p></li></ul><p>由于从给定的某个节点出发，有多个可以前往的下一个节点（树不是线性数据结构），所以在顺序计算（即非并行计算）的情况下，只能推迟对某些节点的访问——即以某种方式保存起来以便稍后再访问。常见的做法是采用栈（LIFO）或队列（FIFO）。由于树本身是一种自我引用（即递归定义）的数据结构，因此很自然也可以用递归方式。</p><p>所以，下面我重点总结了这两种不同的遍历实现方式。</p><p>注：本文所讲的数据结构均为C语言版</p><h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><h3 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">PreOrderTraverse</span><span class="params">(BiTree T,Status(*visit)(TElemType e))</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="literal">NULL</span> == T) <span class="keyword">return</span> OK;</span><br><span class="line">   <span class="keyword">if</span>(ERROR == visit(T-&gt;data))</span><br><span class="line">       <span class="keyword">return</span> ERROR; <span class="comment">//访问结点的数据域</span></span><br><span class="line">   <span class="keyword">if</span>(ERROR == InOrderTraverse(T-&gt;lchild,visit))</span><br><span class="line">       <span class="keyword">return</span> ERROR; <span class="comment">//递归遍历T的左子树</span></span><br><span class="line">   <span class="keyword">return</span> InOrderTraverse(T-&gt;rchild,visit);<span class="comment">//递归遍历T的右子树</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h3><p><strong>1.使用栈的非递归先序遍历算法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment">二叉链表类型定义：</span></span><br><span class="line"><span class="comment">typedef struct BiTNode &#123;</span></span><br><span class="line"><span class="comment">  TElemType  data;</span></span><br><span class="line"><span class="comment">  struct BiTNode  *lchild,*rchild;</span></span><br><span class="line"><span class="comment">&#125; BiTNode, *BiTree;</span></span><br><span class="line"><span class="comment">栈类型Stack的相关定义：</span></span><br><span class="line"><span class="comment">typedef BiTree SElemType;         // 栈的元素类型</span></span><br><span class="line"><span class="comment">Status InitStack(Stack &amp;S);       // 初始化栈</span></span><br><span class="line"><span class="comment">Status StackEmpty(Stack S);       // 判栈空</span></span><br><span class="line"><span class="comment">Status Push(Stack &amp;S, SElemType e);  // 进栈</span></span><br><span class="line"><span class="comment">Status Pop(Stack &amp;S, SElemType &amp;e);   // 出栈 </span></span><br><span class="line"><span class="comment">Status GetTop(Stack S, SElemType &amp;e); // 取栈顶元素</span></span><br><span class="line"><span class="comment">**********/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T, <span class="keyword">void</span> (*visit)(TElemType))</span></span></span><br><span class="line"><span class="function"><span class="comment">/*对每个结点的元素域data调用函数visit进行访问 */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Stack S;   InitStack(S);</span><br><span class="line">   BiTree p = T;</span><br><span class="line">   <span class="comment">// 先序访问根节点，遍历左节点 ，左节点入栈</span></span><br><span class="line">   <span class="comment">// StackEmpty(Stack S);S为空返回true反之false;</span></span><br><span class="line">   <span class="comment">// 当栈不空或 p非空时</span></span><br><span class="line">   <span class="keyword">while</span>(!StackEmpty(S) || p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">     <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        visit(p-&gt;data);</span><br><span class="line">        Push(S,p);</span><br><span class="line">        p = p-&gt;lchild;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(!StackEmpty(S))&#123;</span><br><span class="line">        Pop(S,p); <span class="comment">// 执行完 p指向S出栈的元素</span></span><br><span class="line">        p = p-&gt;rchild;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.不使用栈，使用三叉链表的非递归先序遍历算法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********  </span></span><br><span class="line"><span class="comment">三叉链表类型定义：  </span></span><br><span class="line"><span class="comment">typedef struct TriTNode &#123;  </span></span><br><span class="line"><span class="comment">TElemType data;  </span></span><br><span class="line"><span class="comment">struct TriTNode *parent, *lchild, *rchild;  </span></span><br><span class="line"><span class="comment">&#125; TriTNode, *TriTree;  </span></span><br><span class="line"><span class="comment">**********/</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T, <span class="keyword">void</span> (*visit)(TElemType))</span></span>&#123;</span><br><span class="line">    TriTree p, pr;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = T;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            visit(p-&gt;data);<span class="comment">//输出当前的结点</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                p = p-&gt;lchild;<span class="comment">//若有左孩子，继续访问</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                p = p-&gt;rchild;<span class="comment">//若有右孩子，继续访问</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="comment">//沿双亲指针链查找，找到第一个由右孩子的p结点</span></span><br><span class="line">              <span class="comment">//找不到则结束</span></span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    pr = p;</span><br><span class="line">                    p = p-&gt;parent;</span><br><span class="line">                &#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;(p-&gt;rchild==pr||<span class="literal">NULL</span>==p-&gt;rchild)) <span class="comment">//p有右孩子但不是pr，结束循环</span></span><br><span class="line">            <span class="keyword">if</span>(p) p = p-&gt;rchild;<span class="comment">//找到后，p指向右孩子结点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><h3 id="递归遍历-1"><a href="#递归遍历-1" class="headerlink" title="递归遍历"></a>递归遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InOrderTraverse</span><span class="params">(BiTree T,Status(*visit)(TElemType e))</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="literal">NULL</span> == T) <span class="keyword">return</span> OK;</span><br><span class="line">   <span class="keyword">if</span>(ERROR == InOrderTraverse(T-&gt;lchild,visit))</span><br><span class="line">       <span class="keyword">return</span> ERROR; <span class="comment">//递归遍历T的左子树</span></span><br><span class="line">   <span class="keyword">if</span>(ERROR == visit(T-&gt;data))</span><br><span class="line">       <span class="keyword">return</span> ERROR; <span class="comment">//访问结点的数据域</span></span><br><span class="line">   <span class="keyword">return</span> InOrderTraverse(T-&gt;rchild,visit));<span class="comment">//递归遍历T的右子树</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归遍历-1"><a href="#非递归遍历-1" class="headerlink" title="非递归遍历"></a>非递归遍历</h3><p><strong>1.使用栈的非递归中序遍历算法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment">二叉链表类型定义：</span></span><br><span class="line"><span class="comment">typedef struct BiTNode &#123;</span></span><br><span class="line"><span class="comment">  TElemType  data;</span></span><br><span class="line"><span class="comment">  struct BiTNode  *lchild,*rchild;</span></span><br><span class="line"><span class="comment">&#125; BiTNode, *BiTree;</span></span><br><span class="line"><span class="comment">栈类型Stack的相关定义：</span></span><br><span class="line"><span class="comment">typedef BiTree SElemType;         // 栈的元素类型</span></span><br><span class="line"><span class="comment">Status InitStack(Stack &amp;S);       // 初始化栈</span></span><br><span class="line"><span class="comment">Status StackEmpty(Stack S);       // 判栈空</span></span><br><span class="line"><span class="comment">Status Push(Stack &amp;S, SElemType e);  // 进栈</span></span><br><span class="line"><span class="comment">Status Pop(Stack &amp;S, SElemType &amp;e);   // 出栈 </span></span><br><span class="line"><span class="comment">Status GetTop(Stack S, SElemType &amp;e); // 取栈顶元素</span></span><br><span class="line"><span class="comment">**********/</span></span><br><span class="line"><span class="function">BiTNode *<span class="title">GoFarLeft</span><span class="params">(BiTree T,Stack &amp;S)</span></span>&#123;</span><br><span class="line">    <span class="comment">//从T结点出发，沿左分支走到底，沿途结点的指针入栈S，返回左上结点的指针</span></span><br><span class="line">    <span class="keyword">if</span>(!T) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(T-&gt;lchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        Push(S,T);</span><br><span class="line">        T = T-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T,<span class="keyword">void</span>(*visit)(TElemType e))</span></span>&#123;</span><br><span class="line">    Stack S;   InitStack(S);</span><br><span class="line">    BiTree p；</span><br><span class="line">    p = GoFarLeft(T, S);<span class="comment">//找到最左下的结点，并将沿途结点的指针入栈S</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        visit(p-&gt;data);<span class="comment">//访问结点</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="comment">//令p指向其右孩子为根的子树的最左下结点</span></span><br><span class="line">            p = GoFarLeft(p-&gt;rchild, S);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!StackEmpty(S))&#123;</span><br><span class="line">            <span class="comment">//栈不空时退栈</span></span><br><span class="line">            Pop(S,p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p = <span class="literal">NULL</span>;<span class="comment">//栈空表明遍历结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.不使用栈，使用三叉链表的非递归中序遍历算法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********  </span></span><br><span class="line"><span class="comment">三叉链表类型定义：  </span></span><br><span class="line"><span class="comment">typedef struct TriTNode &#123;  </span></span><br><span class="line"><span class="comment">TElemType data;  </span></span><br><span class="line"><span class="comment">struct TriTNode *parent, *lchild, *rchild;  </span></span><br><span class="line"><span class="comment">&#125; TriTNode, *TriTree;  </span></span><br><span class="line"><span class="comment">**********/</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(TriTree PT, <span class="keyword">void</span> (*visit)(TElemType))</span></span>&#123;</span><br><span class="line">TriTree p=PT, pr;  </span><br><span class="line"><span class="keyword">while</span>(<span class="literal">NULL</span> != p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;lchild != <span class="literal">NULL</span>) &#123;  </span><br><span class="line">            p = p-&gt;lchild;   <span class="comment">//寻找最左下结点</span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> &#123;  </span><br><span class="line">            visit(p-&gt;data);</span><br><span class="line">            <span class="comment">//当前节点左子树为空，但右子树不一定为空，</span></span><br><span class="line">            <span class="comment">//所以该节点可能是这个子树的根节点，要先访问，</span></span><br><span class="line">            <span class="comment">//如果有右节点，才能在右节点之前访问</span></span><br><span class="line">            <span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>) &#123;  </span><br><span class="line">                <span class="comment">//若有右子树，转到该子树，继续寻找最左下结点</span></span><br><span class="line">                p =p-&gt;rchild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="comment">//执行到这里</span></span><br><span class="line">                <span class="comment">//p 要不是最左下节点，要不是没有孩子的右节点</span></span><br><span class="line">                <span class="comment">//其实也就是叶子节点</span></span><br><span class="line">                pr = p;    <span class="comment">//否则返回其父亲</span></span><br><span class="line">                p = p-&gt;parent;  </span><br><span class="line">                <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; (p-&gt;lchild != pr || <span class="literal">NULL</span> == p-&gt;rchild))<span class="comment">//若其不是从左子树回溯来的，或左结点的父亲并没有右孩子 </span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p-&gt;lchild == pr) &#123;<span class="comment">//若最左结点的父亲并没有右孩子         </span></span><br><span class="line">                    visit(p-&gt;data);<span class="comment">//直接访问父亲</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    pr = p;  <span class="comment">//父亲已被访问，故返回上一级</span></span><br><span class="line">                    p = p-&gt;parent;  </span><br><span class="line">                <span class="comment">//该while循环沿双亲链一直查找，若无右孩子则访问</span></span><br><span class="line">                <span class="comment">//直至找到第一个有右孩子的结点为止</span></span><br><span class="line">                <span class="comment">//（但不访问该结点，留给下步if语句访问</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">NULL</span> != p) &#123;</span><br><span class="line">                 <span class="comment">//访问父亲，并转到右孩子</span></span><br><span class="line">                 <span class="comment">//（经上步while处理，可以确定此时p有右孩子）</span></span><br><span class="line">                    visit(p-&gt;data);</span><br><span class="line">                    p = p-&gt;rchild;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><h3 id="递归遍历-2"><a href="#递归遍历-2" class="headerlink" title="递归遍历"></a>递归遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">PostOrderTraverse</span><span class="params">(BiTree T,Status(*visit)(TElemType e))</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="literal">NULL</span> == T) <span class="keyword">return</span> OK;</span><br><span class="line">   <span class="keyword">if</span>(ERROR == InOrderTraverse(T-&gt;lchild,visit))</span><br><span class="line">       <span class="keyword">return</span> ERROR; <span class="comment">//递归遍历T的左子树</span></span><br><span class="line">   <span class="keyword">if</span>(ERROR == InOrderTraverse(T-&gt;rchild,visit))</span><br><span class="line">       <span class="keyword">return</span> ERROR; <span class="comment">//递归遍历T的右子树</span></span><br><span class="line">   <span class="keyword">return</span> visit(T-&gt;data);<span class="comment">//访问结点的数据域</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归遍历-2"><a href="#非递归遍历-2" class="headerlink" title="非递归遍历"></a>非递归遍历</h3><p><strong>1.使用栈的非递归后序遍历算法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment">二叉链表类型定义：</span></span><br><span class="line"><span class="comment">typedef struct BiTNode &#123;</span></span><br><span class="line"><span class="comment">  TElemType  data;</span></span><br><span class="line"><span class="comment">  struct BiTNode  *lchild,*rchild;</span></span><br><span class="line"><span class="comment">&#125; BiTNode, *BiTree;</span></span><br><span class="line"><span class="comment">为分辨后序遍历时两次进栈的不同返回点，需在指针进栈时同时将一个标志进栈</span></span><br><span class="line"><span class="comment">typedef struct &#123;</span></span><br><span class="line"><span class="comment">  struct BiTNode *ptr; // 二叉树结点的指针类型</span></span><br><span class="line"><span class="comment">  int  tag;    // 标志 值为 0 或 1</span></span><br><span class="line"><span class="comment">&#125; SElemType;       // 栈的元素类型</span></span><br><span class="line"><span class="comment">栈类型Stack的相关定义：</span></span><br><span class="line"><span class="comment">typedef BiTree SElemType;         // 栈的元素类型</span></span><br><span class="line"><span class="comment">Status InitStack(Stack &amp;S);       // 初始化栈</span></span><br><span class="line"><span class="comment">Status StackEmpty(Stack S);       // 判栈空</span></span><br><span class="line"><span class="comment">Status Push(Stack &amp;S, SElemType e);  // 进栈</span></span><br><span class="line"><span class="comment">Status Pop(Stack &amp;S, SElemType &amp;e);   // 出栈 </span></span><br><span class="line"><span class="comment">Status GetTop(Stack S, SElemType &amp;e); // 取栈顶元素</span></span><br><span class="line"><span class="comment">**********/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T, <span class="keyword">void</span> (*visit)(TElemType))</span></span></span><br><span class="line"><span class="function"><span class="comment">/* 使用栈，非递归后序遍历二叉树T，     */</span></span></span><br><span class="line"><span class="function"><span class="comment">/* 对每个结点的元素域data调用函数visit */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     Stack S; InitStack(S); SElemType e; BiTree p=T;   </span><br><span class="line">     <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        e.tag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!StackEmpty(S)||p==T)&#123;</span><br><span class="line">            <span class="comment">// 这个while循环的目的是先遍历每个子树的左节点到底，并将沿途的左节点入栈</span></span><br><span class="line">            <span class="comment">// 此时的栈顶元素也就是要访问的起始节点，而 p可能指向栈顶的这个节点也可能指向NULL</span></span><br><span class="line">            <span class="keyword">while</span>(p)&#123;  <span class="comment">// tag == 1,表示新进栈的</span></span><br><span class="line">                </span><br><span class="line">                e.ptr=p;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;lchild)&#123;<span class="comment">// 如果存在左子树</span></span><br><span class="line">                    p=p-&gt;lchild;</span><br><span class="line">                    e.tag=<span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123; <span class="comment">// 否则，有右子树的话，让p指向右子树，没有右子树，p-&gt;NULL,结束本次循环</span></span><br><span class="line">                    p=p-&gt;rchild;</span><br><span class="line">                    e.tag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Push(S,e); <span class="comment">// 入栈</span></span><br><span class="line">            &#125;<span class="comment">// 小while结束</span></span><br><span class="line">            GetTop(S,e); <span class="comment">// 取出栈顶元素，并返回给e,这里是让e指向栈顶元素，方便下面的tag值判断</span></span><br><span class="line">            <span class="keyword">if</span>(!StackEmpty(S)&amp;&amp;e.tag)&#123;  <span class="comment">// tag==1，e为到底的左子树或右子树 ,也是栈顶元素</span></span><br><span class="line">                </span><br><span class="line">                Pop(S,e);<span class="comment">// 叶子结点出栈</span></span><br><span class="line">                p=e.ptr;</span><br><span class="line">                visit(p-&gt;data);<span class="comment">// 访问该结点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!StackEmpty(S))&#123;</span><br><span class="line">                Pop(S,e);<span class="comment">//继续出栈，得到上一层结点</span></span><br><span class="line">                p=e.ptr;</span><br><span class="line">                <span class="keyword">if</span>(e.tag)&#123;<span class="comment">// tag == 1 ,表示上一层结点为上上一层节点的右子树，且该右子树已经入栈</span></span><br><span class="line">                    visit(p-&gt;data);</span><br><span class="line">                    p=<span class="literal">NULL</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//表示上一层结点为上上一层节点的左子树，且上一层节点的右子树没入过栈</span></span><br><span class="line">                    <span class="keyword">if</span>(p-&gt;rchild)&#123;  <span class="comment">// 如果存在右子树，使上一层结点返回入栈，并同时设tag == 1</span></span><br><span class="line">                        p=p-&gt;rchild;  <span class="comment">// 使 p指向右子树</span></span><br><span class="line">                        e.tag=<span class="number">1</span>;</span><br><span class="line">                        Push(S,e); </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;<span class="comment">//没有右子树 ，直接访问该节点</span></span><br><span class="line">                        visit(p-&gt;data);</span><br><span class="line">                        p=<span class="literal">NULL</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//栈空则，p为NULL</span></span><br><span class="line">                p=<span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//大while结束</span></span><br><span class="line">     &#125;<span class="comment">//大if结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.不使用栈，使用三叉链表的非递归后序遍历算法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********  </span></span><br><span class="line"><span class="comment">在三叉链表的结点中增设一个标志域  (mark取值0,1或2)以区分遍历过程中到达该结点时应继续向左或向右或访问该结点</span></span><br><span class="line"><span class="comment">带标志域的三叉链表类型定义：  </span></span><br><span class="line"><span class="comment">typedef struct TriTNode &#123;  </span></span><br><span class="line"><span class="comment">TElemType data;  </span></span><br><span class="line"><span class="comment">struct TriTNode *lchild, *rchild, *parent;  </span></span><br><span class="line"><span class="comment">int mark; // 标志域  </span></span><br><span class="line"><span class="comment">&#125; TriTNode, *TriTree;  </span></span><br><span class="line"><span class="comment">**********/</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(TriTree T, <span class="keyword">void</span> (*visit)(TElemType))</span>  </span></span><br><span class="line"><span class="function"><span class="comment">/* 不使用栈，非递归后序遍历二叉树T， */</span>  </span></span><br><span class="line"><span class="function"><span class="comment">/* 对每个结点的元素域data调用函数visit */</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">//mark ==  0 向左访问，1 访问自身，2 向右访问  </span></span><br><span class="line">    TriTree p= T, pr;  </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="keyword">return</span> ; </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;  </span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;mark!=<span class="number">1</span>)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>) <span class="comment">//若有右孩子  </span></span><br><span class="line">                p-&gt;mark=<span class="number">2</span>;  </span><br><span class="line">            <span class="keyword">else</span> p-&gt;mark=<span class="number">1</span>;  </span><br><span class="line">            pr=p; </span><br><span class="line">            p=p-&gt;lchild;  </span><br><span class="line">        &#125;  </span><br><span class="line">        p=pr; <span class="comment">// p为最左下节点，可能有右孩子</span></span><br><span class="line">        pr=pr-&gt;parent;  </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;mark==<span class="number">2</span>)  &#123; <span class="comment">// p有右孩子</span></span><br><span class="line">            p-&gt;mark=<span class="number">1</span>; <span class="comment">// p访问完右边后下次要访问自己 </span></span><br><span class="line">            p=p-&gt;rchild;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>&#123;  </span><br><span class="line">            visit(p-&gt;data); <span class="comment">// 访问</span></span><br><span class="line">            p-&gt;mark=<span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data==T-&gt;data)  <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h2><p>层次遍历是按二叉树的层次从小到大且每层从左到右的顺序依次访问结点</p><p>对于顺序存储结构的二叉树，其结点在数组中的顺序下标序列与层次遍历的访问顺序一致，因此可直接根据数组得到层次遍历的结果。</p><p>对于链式存储结构的二叉树，难以获得结点的同一层的下一层结点，从层末结点也难以得到下一层的层首结点。所以可使用一个辅助队列存储当前层被访问过的结点。</p><h3 id="使用队列的非递归遍历"><a href="#使用队列的非递归遍历" class="headerlink" title="使用队列的非递归遍历"></a>使用队列的非递归遍历</h3><p>算法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment">二叉链表类型定义：</span></span><br><span class="line"><span class="comment">typedef struct BiTNode &#123;</span></span><br><span class="line"><span class="comment">  TElemType  data;</span></span><br><span class="line"><span class="comment">  struct BiTNode  *lchild,*rchild;</span></span><br><span class="line"><span class="comment">&#125; BiTNode, *BiTree;</span></span><br><span class="line"><span class="comment">**********/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraverse</span><span class="params">(BiTree T,Status(*visit)(TEleType e))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        Queue Q; InitQueue(Q);</span><br><span class="line">        BiTree p = T; <span class="comment">//初始化</span></span><br><span class="line">        visit(p-&gt;data); <span class="comment">//访问根节点</span></span><br><span class="line">        EnQueue(Q,p); <span class="comment">//并将根节点入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(OK==DeQueue(Q,p))<span class="comment">//当队非空时重复执行出队操作</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>)<span class="comment">//访问左孩子并入队</span></span><br><span class="line">        &#123;</span><br><span class="line">        visit(p-&gt;lchild-&gt;data);</span><br><span class="line">            EnQueue(Q,p-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)<span class="comment">//访问右孩子并入队</span></span><br><span class="line">        &#123;</span><br><span class="line">            visit(p-&gt;rchild-&gt;data);</span><br><span class="line">            EnQueue(Q,p-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历的应用"><a href="#遍历的应用" class="headerlink" title="遍历的应用"></a>遍历的应用</h2><h3 id="求二叉树深度"><a href="#求二叉树深度" class="headerlink" title="求二叉树深度"></a>求二叉树深度</h3><p>利用后序遍历框架递归求左、右子树深度，然后取两者的较大值加 1（根节点）作为深度值返回。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BiTreeDepth</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> depthLeft,depthRight;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==T) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//二叉树深度为0</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        depthLeft = BiTreeDepth(T-&gt;lchild);</span><br><span class="line">        depthRight = BiTreeDepth(T-&gt;rchild);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+((depthLeft&gt;depthRight)?depthLeft:depthRight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="销毁二叉树"><a href="#销毁二叉树" class="headerlink" title="销毁二叉树"></a>销毁二叉树</h3><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyBiTree</span><span class="params">(BiTree &amp;T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        DestroyBiTree(T-&gt;lchild);<span class="comment">// 递归销毁左子树</span></span><br><span class="line">        DestroyBiTree(T-&gt;rchild);<span class="comment">// 递归销毁右子树</span></span><br><span class="line">        <span class="built_in">free</span>(T); <span class="comment">// 释放根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除指定元素结点的子树"><a href="#删除指定元素结点的子树" class="headerlink" title="删除指定元素结点的子树"></a>删除指定元素结点的子树</h3><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseX</span><span class="params">(BiTree &amp;T, <span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">/* 对于二叉树T中每一个元素值为x的结点， */</span></span></span><br><span class="line"><span class="function"><span class="comment">/* 删去以它为根的子树，并释放相应的空间 */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T) <span class="keyword">return</span> ;</span><br><span class="line">    ReleaseX(T-&gt;lchild,x);</span><br><span class="line">    ReleaseX(T-&gt;rchild,x);</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;data == x) <span class="built_in">free</span>(T);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制二叉树"><a href="#复制二叉树" class="headerlink" title="复制二叉树"></a>复制二叉树</h3><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CopyBiTree</span><span class="params">(BiTree T, BiTree &amp;TT)</span></span></span><br><span class="line"><span class="function"><span class="comment">/* 递归复制二叉树T得到TT */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   TT = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">   <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        TT-&gt;data = T-&gt;data;</span><br><span class="line">        TT-&gt;lchild = T-&gt;lchild;</span><br><span class="line">        TT-&gt;rchild = T-&gt;rchild;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;lchild) CopyBiTree(T-&gt;lchild,TT-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;rchild)CopyBiTree(T-&gt;rchild,TT-&gt;rchild);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>  <span class="built_in">free</span>(TT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何优雅的使用本博客</title>
      <link href="/2018/10/21/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/10/21/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码" />    <label for="pass">请输入密码</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 使用教程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CSS3 transform属性及其matrix矩阵学习</title>
      <link href="/2018/10/21/%E5%AF%B9CSS3%20transform%E5%B1%9E%E6%80%A7%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/10/21/%E5%AF%B9CSS3%20transform%E5%B1%9E%E6%80%A7%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p></blockquote><p>最近做的一个小网页里需要写一个小转盘，在获取旋转角度时，发现transform的返回值是一段奇怪的参数，后来多方查阅后才了解，返回值是一个matrix()矩阵，matrix()这个东西，其实表示的是使元素发生变化的本质…</p><a id="more"></a><h1 id="首先回顾transform属性的相关知识"><a href="#首先回顾transform属性的相关知识" class="headerlink" title="首先回顾transform属性的相关知识"></a>首先回顾transform属性的相关知识</h1><h2 id="先理解网页上的x-y轴"><a href="#先理解网页上的x-y轴" class="headerlink" title="先理解网页上的x,y轴"></a>先理解网页上的x,y轴</h2><p><img src="https://i.loli.net/2018/11/03/5bdda1eecf875.png" alt="xy轴.png"></p><h2 id="transform属性"><a href="#transform属性" class="headerlink" title="transform属性"></a>transform属性</h2><p>1.偏移</p><ul><li>transform: translate(x,y) ：移动元素位置，x,y为水平和竖直移动的距离，单位是px</li><li>translateX(x)    定义转换，只是用 X 轴的值。    测试</li><li>translateY(y)    定义转换，只是用 Y 轴的值。    测试</li><li>translateZ(z)</li></ul><p>2.旋转</p><ul><li>transform: rotate(x deg)：2D旋转x度，正值顺时针转，负值逆</li><li>3D旋转<ul><li>rotateX()</li><li>rotateY()</li><li>rotateZ()</li></ul></li><li>默认旋转的基点是元素中心点</li></ul><p>3.倾斜</p><ul><li>transform: skew(x deg,y deg):2D倾斜，x,y为沿x,y轴倾斜的角度</li><li>skewX()</li><li>skewY()</li><li>skew默认旋转的基点是中心点</li><li>当倾斜的角度大于45度时，实际看到的元素是反过来的，无论怎么倾斜，元素在x,y轴的投影与原始宽高一致,所以元素才会变形</li></ul><p><img src="https://i.loli.net/2018/11/03/5bdda33acd59f.png" alt="skew.png"><br> skew(60deg,60deg)  黄框为原始大小</p><p>4.缩放</p><ul><li>transform: scale(x,y) ：2D缩放,加参数z可3D缩放，x,y,z数值为缩放倍率如1.5</li><li>scaleX(x)    通过设置 X 轴的值来定义缩放</li><li>scaleY(y)    通过设置 Y 轴的值来定义缩放</li><li>scaleZ(z)</li></ul><h2 id="transform-origin属性"><a href="#transform-origin属性" class="headerlink" title="transform-origin属性"></a>transform-origin属性</h2><p>设置旋转的基点</p><ul><li><p>transform-origin: x-axis y-axis z-axis;</p></li><li><p>x值可以是left/right,center，%，具体px</p></li><li><p>y值可以是top/bottom,center，%，具体px</p></li><li><p>z值自然为z轴的具体坐标 </p></li></ul><h1 id="transform属性的matrix"><a href="#transform属性的matrix" class="headerlink" title="transform属性的matrix()"></a>transform属性的matrix()</h1><p>如果是2D变换，括号里就是6个值的矩阵，如果是3D变换，括号里就是4*4的16个值的矩阵，以下我们讨论的是2D变换</p><p>写法如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: matrix(a,b,c,d,e,f);</span><br></pre></td></tr></table></figure><p>a,b,c,d,e,f的六个参数实际上对应的是一个矩阵</p><p><img src="https://i.loli.net/2018/12/06/5c09439aaab73.jpg" alt="img"></p><p>而如果要使元素的坐标变化，其中是实现原理如下：</p><p><img src="https://i.loli.net/2018/12/06/5c09443115030.jpg" alt="img"></p><p>x,y是元素的原坐标，ax+cy+e对应的是变换后的x轴坐标    <strong>x’</strong> ，bx+dy+f对应的是变换后的y轴坐标 <strong>y’</strong></p><ul><li><strong>偏移(translate)</strong></li></ul><p>显然，在a,b,c,d值不改变的情况下，改变e,f的值就是改变 <strong>x’</strong> ,<br><strong>y’</strong> 的常数项</p><p>所以，若只改变e,f的值，就相当于改变元素的偏移，(e,f)其实就是元素的中心点位置坐标</p><p>实际上也就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: matrix(a, b, c, d, e, f);</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: translate(e px, f px);</span><br></pre></td></tr></table></figure><ul><li><strong>缩放(scale)</strong></li></ul><p>再观察矩阵的式子，缩放就是改变x,y的系数的倍数</p><p>显然，若改变x系数倍数而不改变y系数，则只改变a的值</p><p>同理，改变y则需只改变d的值</p><p>所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: matrix(a, 0, 0, d, 0, 0);</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: scale(a, d);</span><br></pre></td></tr></table></figure><ul><li><strong>旋转(rotate)</strong></li></ul><p>旋转相对复杂些，涉及到三角函数的变换，与a,b,c,d参数有关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: matrix(cosθ,sinθ,-sinθ,cosθ,0,0)</span><br></pre></td></tr></table></figure><p>矩阵变换实际长这样</p><p><img src="https://i.loli.net/2018/12/06/5c0944883518b.jpg" alt="img"></p><p>所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: matrix(cosθ,sinθ,-sinθ,cosθ,0,0)</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: transform:rotate(θ化为弧度制 deg);</span><br></pre></td></tr></table></figure><p>若需要获取元素的rotate(θ)的旋转角度θ，则需要利用返回值中的参数值cosθ与sinθ</p><p>问题也就转化为：已知sinθ和cosθ，求θ值。这里就需要用到反三角函数了，是个数学问题。</p><ul><li><strong>倾斜(skew)</strong></li></ul><p>倾斜也涉及三角函数，不过只改变的是tanθ的值，只与b,c参数有关，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: matrix(1,tan(θy),tan(θx),1,0,0)</span><br></pre></td></tr></table></figure><p>利用矩阵运算后的结果：</p><p>x’ = x+y<em>tan(θx)+0 = x+y</em>tan(θx) </p><p>y’ = x<em>tan(θy)+y+0 = x</em>tan(θy)+y</p><p>所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: matrix(cosθ,sinθ,-sinθ,cosθ,0,0)</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: rotate(θ化为弧度制deg);</span><br></pre></td></tr></table></figure><ul><li>matrix()的优点</li></ul><p>相比translate、scale、rotate、skew，matrix()可以实现镜像对称，其实原理就是相对于y=tanθ x直线进行翻转，下面是具体方法（k=θ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: matrix((1-k*k) / (1+k*k), 2k / (1 + k*k), 2k / (1 + k*k), (k*k - 1) / (1+k*k), 0, 0)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
